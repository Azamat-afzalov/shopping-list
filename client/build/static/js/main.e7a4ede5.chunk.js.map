{"version":3,"sources":["components/AppNavbar.jsx","components/ShoppingList.jsx","actions/itemActions.js","actions/types.js","components/ItemModal.jsx","reducers/itemReducer.js","reducers/index.js","store.js","App.jsx","serviceWorker.js","index.js"],"names":["AppNavbar","useState","isOpen","setIsOpen","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","connect","state","item","getItems","dispatch","axios","get","then","response","type","payload","data","deleteItem","id","delete","res","props","items","onDeleteClick","evt","console","log","target","useEffect","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","addItem","newItem","post","modal","setModal","setName","toggle","Modal","ModalHeader","ModalBody","Form","onSubmit","e","preventDefault","FormGroup","Label","for","Input","placeholder","onChange","value","block","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e7a4ede5.chunk.js","sourcesContent":["import React , {useState} from 'react';\r\nimport {\r\n    Collapse ,\r\n    Navbar ,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav ,\r\n    NavItem,\r\n    NavLink,\r\n    Container\r\n} from 'reactstrap';\r\n\r\n\r\nconst AppNavbar = () => {\r\n    const [isOpen , setIsOpen] = useState(false);\r\n    const toggle = () => setIsOpen(!isOpen);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                <Container>\r\n                    <NavbarBrand href=\"/\">\r\n                        Shopping List\r\n                    </NavbarBrand>\r\n                    <NavbarToggler onClick={toggle}/>\r\n                    <Collapse isOpen={isOpen} navbar>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            <NavItem>\r\n                                <NavLink href=\"https://github.com/azamat-afzalov\">\r\n                                    Github\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n\r\n\r\n\r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppNavbar\r\n","import React , {useEffect} from 'react';\r\nimport { ListGroup , ListGroupItem , Button} from 'reactstrap';\r\nimport {CSSTransition , TransitionGroup} from 'react-transition-group';\r\nimport {connect} from 'react-redux';\r\nimport {getItems , deleteItem} from '../actions/itemActions.js';\r\nimport propTypes from 'prop-types';\r\n\r\nconst ShoppingList = (props) => {\r\n    const {items} = props.item;\r\n    const onDeleteClick = (evt) => {\r\n        console.log(evt.target.id);\r\n        props.deleteItem(evt.target.id);\r\n    }\r\n    useEffect(() => {\r\n        props.getItems();\r\n\r\n    },[])\r\n\r\n    return (\r\n        <ListGroup className=\"mt-3\">\r\n            <TransitionGroup className=\"shopping-list\">\r\n                {items.map(({_id,name}) => (\r\n                    <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                        <ListGroupItem>\r\n                            <Button\r\n                                className=\"remove-btn\"\r\n                                color=\"danger\"\r\n                                size=\"sm\"\r\n                                id={_id}\r\n                                onClick={onDeleteClick}\r\n                            >&times;</Button>\r\n                            {name}\r\n                        </ListGroupItem>\r\n                    </CSSTransition>\r\n                ))}\r\n            </TransitionGroup>\r\n        </ListGroup>\r\n    )\r\n}\r\nShoppingList.propTypes = {\r\n    getItems : propTypes.func.isRequired,\r\n    item : propTypes.object.isRequired\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    item : state.item\r\n})\r\nexport default connect(mapStateToProps,{getItems , deleteItem})(ShoppingList)\r\n","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types';\r\nimport axios from 'axios';\r\n\r\nexport const getItems = () => dispatch => {\r\n    // dispatch(setItemsLoading());\r\n    axios.get('/api/items')\r\n        .then(response => {\r\n            dispatch({\r\n                type: GET_ITEMS,\r\n                payload: response.data\r\n            })\r\n        });\r\n}\r\nexport const deleteItem = (id) => dispatch => {\r\n    axios\r\n        .delete(`/api/items/${id}`)\r\n        .then(res => {\r\n            dispatch({\r\n                type: DELETE_ITEM,\r\n                payload: id\r\n            })\r\n        })\r\n    return {\r\n        type: DELETE_ITEM,\r\n        payload: id\r\n    }\r\n}\r\nexport const addItem = (newItem) => dispatch => {\r\n    axios\r\n        .post('/api/items', newItem)\r\n        .then(res => dispatch({ type: ADD_ITEM, payload: res.data }))\r\n    return {\r\n        type: ADD_ITEM,\r\n        payload: newItem\r\n    }\r\n}\r\nexport const setItemsLoading = () => {\r\n    return {\r\n        type: ITEMS_LOADING\r\n    }\r\n}","export const GET_ITEMS = \"GET_ITEMS\";\r\nexport const ADD_ITEM = \"ADD_ITEM\";\r\nexport const DELETE_ITEM = \"DELETE_ITEM\";\r\nexport const ITEMS_LOADING = \"ITEMS_LOADING\";","import React , {useState} from 'react';\r\nimport {\r\n    Button ,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n}   from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport {addItem} from '../actions/itemActions.js';\r\n\r\n\r\nconst ItemModal = (props) => {\r\n    const [modal , setModal] = useState(false);\r\n    const [name , setName] = useState('')\r\n    const toggle = () => setModal(modal => (!modal));\r\n    const onChange = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n    const submitHandler = (e) =>{\r\n        e.preventDefault();\r\n        const newItem = {\r\n            name\r\n        }\r\n\r\n        // Add Item via addItem action\r\n        props.addItem(newItem);\r\n        toggle();\r\n        setName('');\r\n    }\r\n    return (\r\n        <div>\r\n            <Button\r\n                color=\"dark\"\r\n                className=\"mb-2\"\r\n                onClick={toggle}\r\n            >Add Item</Button>\r\n            <Modal\r\n                isOpen={modal}\r\n                toggle={toggle}\r\n            >\r\n                <ModalHeader\r\n                    toggle={toggle}\r\n                >\r\n                    Add to Shopping List\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <Form onSubmit={submitHandler}>\r\n                        <FormGroup>\r\n                            <Label for=\"item\"> Item </Label>\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                id=\"item\"\r\n                                placeholder=\"add shopping item\"\r\n                                onChange={onChange}\r\n                                value={name}\r\n                            />\r\n                            <Button\r\n                                color=\"dark\"\r\n                                className=\"mt-3\"\r\n                                block\r\n                            >\r\n                                Add Item\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </Form>\r\n                </ModalBody>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    item : state.item\r\n})\r\n\r\nexport default connect(mapStateToProps , {addItem})(ItemModal);","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false\r\n            }\r\n        case DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item._id !== action.payload)\r\n            }\r\n        case ADD_ITEM:\r\n            return {\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n            }\r\n        case ITEMS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\nexport default combineReducers({\r\n    item: itemReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\n\r\nexport default store;","import React from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport ShoppingList from './components/ShoppingList';\nimport ItemModal from './components/ItemModal';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container} from 'reactstrap'\nimport './App.css';\n\nimport {Provider} from 'react-redux';\nimport store from './store.js';\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <AppNavbar/>\n        <Container>\n          <ItemModal/>\n          <ShoppingList/>\n        </Container>\n\n      </div>\n    </Provider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <React.StrictMode><App/></React.StrictMode>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}